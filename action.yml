name: 'Report test coverage'
description: 'Run tests and report the test coverage'

branding:
  icon: 'file-text'
  color: 'green'

inputs:

  run:
    description: 'Commands to run the test suite and compute the test coverage (only for the `pull_requrst` and `push` triggers).'
    default: |
      coverage run -m unittest discover
      python -m coverage json --omit "tests/*"

  working-directory:
    description: 'Directory in which the test suite will be run (only for the `pull_requrst` and `push` triggers).'
    default: '.'

  report:
    description: 'Report the test coverage.'
    default: 'true'

  github-auth:
    description: 'Authentication token used to comment on pull requests (only for the `workflow_run` trigger).'
    required: 'true'
    default: ${{ github.token }}

  gist-id:
    description: 'Gist ID where to store the coverage results (only for the `pull_requrst` and `push` triggers).'
    required: 'true'

  gist-auth:
    description: 'Authentication token used to update the gist (only for the `pull_requrst` and `push` triggers).'
    required: 'true'

  gist-filename:
    description: 'Filename to assign to the gist (only for the `pull_requrst` and `push` triggers).'
    default: coverage.json

outputs:

  coverage:
    description: 'The test coverage (value between 0 and 100, only for the `pull_requrst` and `push` triggers).'
    value: ${{ steps.coverage.outputs.coverage }}

runs:

  using: "composite"
  steps:

  # --------------------------------------------------------------------------------------
  # Pull request / Push
  # --------------------------------------------------------------------------------------

    - name: Install dependencies
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      shell: bash
      run: |
        sudo apt install -y jq
        pip install coverage

    - name: Run test suite
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ inputs.run }}

    - name: Fetch coverage
      if: inputs.report == 'true' && (github.event_name == 'pull_request' || github.event_name == 'push')
      id: coverage
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "coverage=$(jq -r '[.totals.percent_covered_display][0]' coverage.json)" >> $GITHUB_OUTPUT
  
    - name: Prepare a comment for the pull request
      if: inputs.report == 'true' && github.event_name == 'pull_request'
      shell: bash
      run: |
        echo "{
          \"issue_number\": $ISSUE_NUMBER,
          \"body\": \"Test coverage of $HEAD_SHA: **$COVERAGE%**\"
        }" >> comment.json
      env:
        ISSUE_NUMBER: ${{ github.event.number }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        COVERAGE: ${{ steps.coverage.outputs.coverage }}

    - name: Upload the comment as an artifact
      if: inputs.report == 'true' && github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: comment
        path: comment.json

    - name: Create badge
      if: inputs.report == 'true' && github.event_name == 'push'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-auth }}
        gistID: ${{ inputs.gist-id }}
        filename: ${{ inputs.gist-filename }}
        label: Coverage
        message: ${{ steps.coverage.outputs.coverage }}%
        minColorRange: 50
        maxColorRange: 90
        valColorRange: ${{ steps.coverage.outputs.coverage }}

  # --------------------------------------------------------------------------------------
  # Workflow run
  # --------------------------------------------------------------------------------------

    - name: Download the comment artifact
      if: inputs.report == 'true' && github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4.1.8
      continue-on-error: true
      with:
        name: comment
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ inputs.github_token }}

    - name: Read comment artifact
      if: inputs.report == 'true' && github.event_name == 'workflow_run'
      continue-on-error: true
      shell: bash
      run: echo "comment_json=$(jq -c . < comment.json)" >> $GITHUB_ENV

    - name: Create the comment
      if: inputs.report == 'true' && github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ inputs.github-auth }}
        script: |
          github.rest.issues.createComment({
            issue_number: ${{ fromJSON(env.comment_json).issue_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '${{ fromJSON(env.comment_json).body }}'
          })
